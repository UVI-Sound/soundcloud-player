{"version":3,"file":"index-f3_gn3AB.js","sources":["../../src/Elements/Controls/PlayButton.ts","../../src/Elements/Controls/StopButton.ts","../../src/utils/loadScript.ts","../../src/Classes/EventManager.ts","../../src/utils/hiddeIframe.ts","../../src/Classes/Soundcloud.ts","../../src/utils/uuid.ts","../../src/Elements/SoundcloudPlayer.ts"],"sourcesContent":["export class SoundcloudPlayButton extends HTMLElement {\n    constructor() {\n        super();\n    }\n}\n\n\nif (customElements.get('sc-play') !== null) {\n    customElements.define('sc-play', SoundcloudPlayButton);\n}\n","export class SoundcloudStopButton extends HTMLElement {\n    constructor() {\n        super();\n    }\n}\n\n\nif (customElements.get('sc-stop') !== null) {\n    customElements.define('sc-stop', SoundcloudStopButton);\n}\n","export const loadScript = (url: string, callback: () => void): void => {\n    const scripts = [].slice\n        .call(document.getElementsByTagName('script'))\n        .filter((script: HTMLScriptElement) => script.src === url);\n    if (scripts.length > 0) {\n        window.setTimeout(callback, 2000);\n        return;\n    }\n    const script: HTMLScriptElement = document.createElement('script');\n\n    script.onload = function () {\n        callback();\n    };\n    script.type = 'text/javascript';\n    script.src = url;\n    document.getElementsByTagName('body')[0].appendChild(script);\n};\n","export class EventManager {\n    public static sendEvent<EventDetailsType>(type: string, details?: EventDetailsType,): boolean {\n        return dispatchEvent(new CustomEvent(type, { detail: details ?? {} }));\n    }\n\n    /**\n     * Listen to one are more event and apply callback to\n     *\n     * @param types\n     * @param callback\n     * @returns\n     */\n    public static listenEvent<EventDetailsType>(\n        types: string | string[],\n        callback: (detail: EventDetailsType, event: Event) => void,\n    ): void {\n        types = Array.isArray(types) ? types : [types];\n        types.forEach((type: string) => {\n            window.addEventListener(type, function (e: Event) {\n                const event = e as Event & { detail: EventDetailsType };\n                callback(event.detail, e);\n            });\n        });\n    }\n}\n","export const hideIframe = (iframe: HTMLIFrameElement): void => {\n    iframe.style.opacity = '0';\n    iframe.style.position = 'absolute';\n    iframe.style.top = '-100000px';\n};\n","import { loadScript } from '../utils/loadScript.ts';\nimport { EventManager } from './EventManager.ts';\nimport { hideIframe } from '../utils/hiddeIframe.ts';\n\nexport interface TrackType {\n    title: string;\n    duration: number;\n    percentPlayed: number;\n    artwork_url: string;\n}\n\nexport interface SoundcloudType {\n    bind: <T>(type: string, callback: (data: T) => void) => void;\n    getSounds: (callback: (sounds: TrackType[]) => void) => void;\n    play: () => void;\n    pause: () => void;\n    seekTo: (ms: number) => void;\n}\n\nexport interface ScOptionsType {\n    trackId: string;\n}\n\nexport type ScEventTypes =\n    | 'track.play'\n    | 'track.changed'\n    | 'track.pause'\n    | 'track.progressed'\n    | 'track.time';\n\nconst scWindow = window as unknown as {\n    SC: {\n        Widget: ((iframe: HTMLIFrameElement) => SoundcloudType) & {\n            Events: {\n                PLAY_PROGRESS: string;\n            };\n        };\n    };\n};\n\n\nexport class Soundcloud {\n    soundcloud!: SoundcloudType;\n    currentTrack: TrackType;\n\n    constructor(\n        private readonly iframe: HTMLIFrameElement,\n        private readonly elementUuid: string,\n        private readonly options: ScOptionsType,\n    ) {\n        this.currentTrack = {\n            title: '',\n            duration: 0,\n            percentPlayed: 0,\n            artwork_url: '',\n        };\n        this.bindEvents();\n    }\n\n    init(): void {\n        this.iframe.allow =\"autoplay\";\n        this.iframe.src =\n            'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/' +\n            this.options.trackId +\n            '&amp;auto_play=false';\n\n        hideIframe(this.iframe);\n\n        loadScript('https://w.soundcloud.com/player/api.js', () => {\n            this.soundcloud = scWindow.SC.Widget(this.iframe);\n            this.soundcloud.bind('ready', () => {\n                this.soundcloud.getSounds((sounds) => {\n                    const tracks = sounds.filter((sound) =>\n                        Object.prototype.hasOwnProperty.call(sound, 'title'),\n                    );\n                    this.trackChanged(tracks[0]);\n                });\n            });\n            this.soundcloud.bind(\n                scWindow.SC.Widget.Events.PLAY_PROGRESS,\n                (progress: { currentPosition: number }) => {\n                    this.trackProgressed(progress.currentPosition);\n                },\n            );\n        });\n    }\n\n    /**\n     * Track changed\n     * @param track\n     * @private\n     */\n    private trackChanged(track: TrackType): void {\n        this.currentTrack = track;\n        EventManager.sendEvent(this.getEvent('track.changed'), track);\n    }\n\n    /**\n     * Track progressed\n     * @param currentPosition\n     * @private\n     */\n    private trackProgressed(currentPosition: number): void {\n        this.currentTrack.percentPlayed = Number(\n            ((currentPosition / this.currentTrack.duration) * 100).toFixed(2),\n        );\n        EventManager.sendEvent(this.getEvent('track.progressed'));\n    }\n\n    private bindEvents(): void {\n        EventManager.listenEvent(this.getEvent('track.play'), () => {\n            this.soundcloud.play();\n        });\n        EventManager.listenEvent(this.getEvent('track.pause'), () => {\n            this.soundcloud.pause();\n        });\n\n        EventManager.listenEvent(this.getEvent('track.time'), (ms: number) => {\n            this.soundcloud.seekTo(ms);\n        });\n    }\n\n    public getEvent(type: ScEventTypes): string {\n        return this.elementUuid + type;\n    }\n}\n","export const uuid = (): string => {\n    return '10000000-1000-4000-8000-100000000000'.replace(\n        /[018]/g,\n        (c: string) =>\n            (\n                parseInt(c) ^\n                (crypto.getRandomValues(new Uint8Array(1))[0] &\n                    (15 >> (parseInt(c) / 4)))\n            ).toString(16),\n    );\n};\n","import { Soundcloud, type TrackType } from '../Classes/Soundcloud.ts';\nimport { uuid } from '../utils/uuid.ts';\nimport { EventManager } from '../Classes/EventManager.ts';\n\nexport class SoundcloudPlayer extends HTMLElement {\n    titleContainer: HTMLElement | null;\n    playButton: HTMLElement | null;\n    stopButton: HTMLElement | null;\n    progress: NodeListOf<HTMLElement>;\n    soundcloudInstance!: Soundcloud;\n    iframePlayer!: HTMLIFrameElement;\n    background!: HTMLImageElement | null;\n    time: HTMLInputElement | null;\n    uuid: string;\n\n    constructor() {\n        super();\n\n        this.uuid = uuid();\n        this.initSoundcloud();\n\n        this.titleContainer = this.querySelector('[data-title]');\n        this.playButton = this.querySelector('sc-play');\n        console.log(this.playButton);\n        this.stopButton = this.querySelector('sc-stop');\n        this.progress = this.querySelectorAll('[data-progress]');\n        this.background = this.querySelector('[data-background]');\n        this.time = this.querySelector('[data-time]');\n\n        this.bindEvents();\n    }\n\n    /**\n     *\n     * @private\n     */\n    private bindEvents(): void {\n        EventManager.listenEvent<TrackType>(\n            this.soundcloudInstance.getEvent('track.changed'),\n            this.handleTrackChanged.bind(this),\n        );\n\n        EventManager.listenEvent(\n            this.soundcloudInstance.getEvent('track.progressed'),\n            this.handleTrackProgress.bind(this),\n        );\n\n        this.playButton?.addEventListener('click', () => {\n            EventManager.sendEvent(\n                this.soundcloudInstance.getEvent('track.play'),\n            );\n        });\n\n        this.stopButton?.addEventListener('click', () => {\n            EventManager.sendEvent(this.soundcloudInstance.getEvent('track.pause'));\n        });\n\n        this.time?.addEventListener('input', () => {\n            const percentage = parseInt(this.time?.value ?? '0');\n            const newTime =\n                (percentage / 100) *\n                this.soundcloudInstance.currentTrack.duration;\n            this.soundcloudInstance.soundcloud.seekTo(newTime);\n        });\n    }\n\n    private initSoundcloud(): void {\n        this.iframePlayer = document.createElement('iframe');\n        document.body.appendChild(this.iframePlayer);\n        this.soundcloudInstance = new Soundcloud(this.iframePlayer, this.uuid, {\n            trackId: this.getAttribute('track-id') ?? '',\n        });\n        this.soundcloudInstance.init();\n    }\n\n    private handleTrackProgress(): void {\n        this.progress.forEach((el) => {\n            const propertyArray = el.dataset.progress?.split('.') ?? [];\n            let obj = el;\n\n            for (let i = 0; i < propertyArray.length - 1; i++) {\n                // @ts-expect-error todo\n                obj = obj[propertyArray[i]];\n            }\n\n            // @ts-expect-error todo\n            obj[propertyArray[propertyArray.length - 1]] =\n                this.soundcloudInstance.currentTrack.percentPlayed.toString();\n        });\n    }\n\n    private handleTrackChanged(newTrack: TrackType): void {\n        if (this.titleContainer === null) return;\n        this.titleContainer.innerHTML = newTrack.title;\n\n        if (this.background === null) return;\n\n        this.background.src = newTrack.artwork_url;\n    }\n}\n\nif (customElements.get('soundcloud-player') !== null) {\n    customElements.define('soundcloud-player', SoundcloudPlayer);\n}\n"],"names":["SoundcloudPlayButton","SoundcloudStopButton","loadScript","url","callback","script","EventManager","type","details","types","e","hideIframe","iframe","scWindow","Soundcloud","elementUuid","options","__publicField","sounds","tracks","sound","progress","track","currentPosition","ms","uuid","c","SoundcloudPlayer","_a","_b","_c","newTime","el","propertyArray","obj","i","newTrack"],"mappings":"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"}
